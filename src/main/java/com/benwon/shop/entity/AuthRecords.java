/*
 * This file is generated by jOOQ.
 */
package com.benwon.shop.entity;

import java.io.Serializable;
import java.time.LocalDateTime;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import lombok.Data;


/**
 * 授權申請紀錄
 */
@Data
@JsonIgnoreProperties(value = {"hibernateLazyInitializer", "handler", "fieldHandler"})

@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "auth_records", schema = "shop", uniqueConstraints = {
    @UniqueConstraint(name = "KEY_auth_records_PRIMARY", columnNames = {"id"})
}, indexes = {
    @Index(name = "PRIMARY", unique = true, columnList = "id ASC")
})
public class AuthRecords implements Serializable {

    private static final long serialVersionUID = -1454053759;

    private String        id;
    private String        clientId;
    private String        responseType;
    private String        redirectUri;
    private String        state;
    private String        scope;
    private String        nonce;
    private String        myUserId;
    private String        myAccessToken;
    private String        myOauthToken;
    private String        lineUserId;
    private String        lineAccessToken;
    private String        lineRefreshToken;
    private String        authCode;
    private Integer       received;
    private String        createdBy;
    private LocalDateTime createdDate;
    private String        lastModifiedBy;
    private LocalDateTime lastModifiedDate;

    public AuthRecords() {}

    public AuthRecords(AuthRecords value) {
        this.id = value.id;
        this.clientId = value.clientId;
        this.responseType = value.responseType;
        this.redirectUri = value.redirectUri;
        this.state = value.state;
        this.scope = value.scope;
        this.nonce = value.nonce;
        this.myUserId = value.myUserId;
        this.myAccessToken = value.myAccessToken;
        this.myOauthToken = value.myOauthToken;
        this.lineUserId = value.lineUserId;
        this.lineAccessToken = value.lineAccessToken;
        this.lineRefreshToken = value.lineRefreshToken;
        this.authCode = value.authCode;
        this.received = value.received;
        this.createdBy = value.createdBy;
        this.createdDate = value.createdDate;
        this.lastModifiedBy = value.lastModifiedBy;
        this.lastModifiedDate = value.lastModifiedDate;
    }

    public AuthRecords(
        String        id,
        String        clientId,
        String        responseType,
        String        redirectUri,
        String        state,
        String        scope,
        String        nonce,
        String        myUserId,
        String        myAccessToken,
        String        myOauthToken,
        String        lineUserId,
        String        lineAccessToken,
        String        lineRefreshToken,
        String        authCode,
        Integer       received,
        String        createdBy,
        LocalDateTime createdDate,
        String        lastModifiedBy,
        LocalDateTime lastModifiedDate
    ) {
        this.id = id;
        this.clientId = clientId;
        this.responseType = responseType;
        this.redirectUri = redirectUri;
        this.state = state;
        this.scope = scope;
        this.nonce = nonce;
        this.myUserId = myUserId;
        this.myAccessToken = myAccessToken;
        this.myOauthToken = myOauthToken;
        this.lineUserId = lineUserId;
        this.lineAccessToken = lineAccessToken;
        this.lineRefreshToken = lineRefreshToken;
        this.authCode = authCode;
        this.received = received;
        this.createdBy = createdBy;
        this.createdDate = createdDate;
        this.lastModifiedBy = lastModifiedBy;
        this.lastModifiedDate = lastModifiedDate;
    }

    @Id
    @Column(name = "id", nullable = false, length = 60)
    @NotNull
    @Size(max = 60)
    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @Column(name = "client_id", length = 60)
    @Size(max = 60)
    public String getClientId() {
        return this.clientId;
    }

    public void setClientId(String clientId) {
        this.clientId = clientId;
    }

    @Column(name = "response_type", length = 60)
    @Size(max = 60)
    public String getResponseType() {
        return this.responseType;
    }

    public void setResponseType(String responseType) {
        this.responseType = responseType;
    }

    @Column(name = "redirect_uri", length = 60)
    @Size(max = 60)
    public String getRedirectUri() {
        return this.redirectUri;
    }

    public void setRedirectUri(String redirectUri) {
        this.redirectUri = redirectUri;
    }

    @Column(name = "state", length = 60)
    @Size(max = 60)
    public String getState() {
        return this.state;
    }

    public void setState(String state) {
        this.state = state;
    }

    @Column(name = "scope", length = 500)
    @Size(max = 500)
    public String getScope() {
        return this.scope;
    }

    public void setScope(String scope) {
        this.scope = scope;
    }

    @Column(name = "nonce", length = 60)
    @Size(max = 60)
    public String getNonce() {
        return this.nonce;
    }

    public void setNonce(String nonce) {
        this.nonce = nonce;
    }

    @Column(name = "my_user_id", length = 100)
    @Size(max = 100)
    public String getMyUserId() {
        return this.myUserId;
    }

    public void setMyUserId(String myUserId) {
        this.myUserId = myUserId;
    }

    @Column(name = "my_access_token", length = 500)
    @Size(max = 500)
    public String getMyAccessToken() {
        return this.myAccessToken;
    }

    public void setMyAccessToken(String myAccessToken) {
        this.myAccessToken = myAccessToken;
    }

    @Column(name = "my_oauth_token", length = 1000)
    @Size(max = 1000)
    public String getMyOauthToken() {
        return this.myOauthToken;
    }

    public void setMyOauthToken(String myOauthToken) {
        this.myOauthToken = myOauthToken;
    }

    @Column(name = "line_user_id", length = 100)
    @Size(max = 100)
    public String getLineUserId() {
        return this.lineUserId;
    }

    public void setLineUserId(String lineUserId) {
        this.lineUserId = lineUserId;
    }

    @Column(name = "line_access_token", length = 1000)
    @Size(max = 1000)
    public String getLineAccessToken() {
        return this.lineAccessToken;
    }

    public void setLineAccessToken(String lineAccessToken) {
        this.lineAccessToken = lineAccessToken;
    }

    @Column(name = "line_refresh_token", length = 1000)
    @Size(max = 1000)
    public String getLineRefreshToken() {
        return this.lineRefreshToken;
    }

    public void setLineRefreshToken(String lineRefreshToken) {
        this.lineRefreshToken = lineRefreshToken;
    }

    @Column(name = "auth_code", length = 60)
    @Size(max = 60)
    public String getAuthCode() {
        return this.authCode;
    }

    public void setAuthCode(String authCode) {
        this.authCode = authCode;
    }

    @Column(name = "received", precision = 10)
    public Integer getReceived() {
        return this.received;
    }

    public void setReceived(Integer received) {
        this.received = received;
    }

    @Column(name = "created_by", nullable = false, length = 60)
    @NotNull
    @Size(max = 60)
    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    @Column(name = "created_date", nullable = false)
    @NotNull
    public LocalDateTime getCreatedDate() {
        return this.createdDate;
    }

    public void setCreatedDate(LocalDateTime createdDate) {
        this.createdDate = createdDate;
    }

    @Column(name = "last_modified_by", nullable = false, length = 60)
    @NotNull
    @Size(max = 60)
    public String getLastModifiedBy() {
        return this.lastModifiedBy;
    }

    public void setLastModifiedBy(String lastModifiedBy) {
        this.lastModifiedBy = lastModifiedBy;
    }

    @Column(name = "last_modified_date", nullable = false)
    @NotNull
    public LocalDateTime getLastModifiedDate() {
        return this.lastModifiedDate;
    }

    public void setLastModifiedDate(LocalDateTime lastModifiedDate) {
        this.lastModifiedDate = lastModifiedDate;
    }
}
